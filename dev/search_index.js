var documenterSearchIndex = {"docs":
[{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"DocTestSetup  = quote\n    using BernsteinExpansions\nend","category":"page"},{"location":"man/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Pages = [\"introduction.md\"]\nDepth = 3","category":"page"},{"location":"man/introduction/#Bernstein-Expansion","page":"Introduction","title":"Bernstein Expansion","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Consider a polynomial in n variables, x_1 ldots x_n expressed in its power form,","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"    p(x) = sum_i=0^l a_i x^iqquad x = (x_1 ldots x_n)","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"where we use the multi-index notation. The degree of p is l = (l_1 ldots l_n), 0  l_i  infty for all i = 1 ldots n.","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Box","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"X = barx_1 overlinex_1","category":"page"},{"location":"man/introduction/#Example","page":"Introduction","title":"Example","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"using BernsteinExpansions, DynamicPolynomials\n\n@polyvar x\n\nunivariate(x^3, 3, 1..2)","category":"page"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"univariate(2x^3, 3, 1..2)","category":"page"},{"location":"man/introduction/#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"man/introduction/","page":"Introduction","title":"Introduction","text":"Smith [Smi09], Smith [Smi12] and Titi and Garloff [TG17]","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"DocTestSetup  = quote\n    using BernsteinExpansions\nend","category":"page"},{"location":"man/range/#Range-Enclosure","page":"Range Enclosure","title":"Range Enclosure","text":"","category":"section"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"Pages = [\"range.md\"]\nDepth = 3","category":"page"},{"location":"man/range/#Enclosure-property","page":"Range Enclosure","title":"Enclosure property","text":"","category":"section"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"Let p be a polynomial n variables of degree l = (l_1 ldots l_n),","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"    p(x) = sum_i=0^l a_i x^iqquad x = (x_1 ldots x_n)","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"and the axis-aligned hyperrectangular set X.","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"Range enclosure using Bernstein expansion is to compute a tight outer approximation for p(X), the range of p over X. Such bounds can be determined by using the coefficients of the expansion of the given polynomial into Bernstein polynomials.","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"TODO: add property","category":"page"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"    min_i b_i  p(x)  max b_i","category":"page"},{"location":"man/range/#Examples","page":"Range Enclosure","title":"Examples","text":"","category":"section"},{"location":"man/range/","page":"Range Enclosure","title":"Range Enclosure","text":"using BernsteinExpansions, DynamicPolynomials\n\n@polyvar x y","category":"page"},{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This page contains some general information about this project, and recommendations about contributing.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Pages = [\"about.md\"]","category":"page"},{"location":"about/#Contributing","page":"About","title":"Contributing","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"If you like this package, consider contributing! You can send bug reports (or fix them and send your code), add examples to the documentation or propose new features.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Below some conventions that we follow when contributing to this package are detailed. For specific guidelines on documentation, see the Documentations Guidelines wiki.","category":"page"},{"location":"about/#Branches","page":"About","title":"Branches","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"Each pull request (PR) should be pushed in a new branch with the name of the author followed by a descriptive name, e.g. t/mforets/my_feature. If the branch is associated to a previous discussion in one issue, we use the name of the issue for easier lookup, e.g. t/mforets/7.","category":"page"},{"location":"about/#Unit-testing-and-continuous-integration-(CI)","page":"About","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This project is synchronized with GitHub Actions such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to make all unit tests pass.","category":"page"},{"location":"about/","page":"About","title":"About","text":"To run the unit tests locally, you can do:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> using Pkg\n\njulia> Pkg.test(\"BernsteinExpansions\")","category":"page"},{"location":"about/","page":"About","title":"About","text":"We also advise adding new unit tests when adding new features to ensure long-term support of your contributions.","category":"page"},{"location":"about/#Contributing-to-the-documentation","page":"About","title":"Contributing to the documentation","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This documentation is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. To build the docs, run make.jl:","category":"page"},{"location":"about/","page":"About","title":"About","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"about/#Running-the-benchmarks","page":"About","title":"Running the benchmarks","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This package contains a suite of benchmarks that is handled through PkgBenchmark. To run the benchmarks, execute the following commands in Julia's REPL:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> using BernsteinExpansions, PkgBenchmark\njulia> benchmarkpkg(\"BernsteinExpansions\")","category":"page"},{"location":"about/","page":"About","title":"About","text":"To save the results to a custom directory, use:","category":"page"},{"location":"about/","page":"About","title":"About","text":"julia> benchmarkpkg(\"BernsteinExpansions\", resultsdir=\"/Users/forets/Projects\")","category":"page"},{"location":"about/","page":"About","title":"About","text":"For further options see the inline help of benchmarkpkg.","category":"page"},{"location":"about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"These persons have contributed to BernsteinExpansions.jl (in alphabetic order):","category":"page"},{"location":"about/","page":"About","title":"About","text":"Marcelo Forets\nAlexandre Rocca","category":"page"},{"location":"man/benchmarks/#Benchmarks","page":"Benchmarks","title":"Benchmarks","text":"","category":"section"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"Pages = [\"benchmarks.md\"]\nDepth = 3","category":"page"},{"location":"man/benchmarks/#Running-the-benchmarks","page":"Benchmarks","title":"Running the benchmarks","text":"","category":"section"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"The benchmark/benchmarks.jl file defines a benchmark suite that can be evaluated with the tools provided by PkgBenchmark and BenchmarkTools.","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"To run the benchmarks, execute:","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia> using PkgBenchmark\njulia> results = benchmarkpkg(\"LazySets\")","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"To compare current version to another tagged version, commit or branch:","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia> results = judge(\"LazySets\", <tagged-version-or-branch>)","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"To export the benchmark results to a Markdown file:","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia> export_markdown(\"results.md\", results)","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"To export the benchmark results to a JSON file:","category":"page"},{"location":"man/benchmarks/","page":"Benchmarks","title":"Benchmarks","text":"julia> writeresults(\"results.json\", results)","category":"page"},{"location":"lib/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"This section includes the types implemented in BernsteinExpansions.jl.","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\nDepth = 3","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"CurrentModule = BernsteinExpansions\nDocTestSetup = quote\n    using BernsteinExpansions\nend","category":"page"},{"location":"lib/types/#Bernstein-forms","page":"Types","title":"Bernstein forms","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"AbstractBernsteinForm\nImplicitBernsteinForm","category":"page"},{"location":"lib/types/#BernsteinExpansions.AbstractBernsteinForm","page":"Types","title":"BernsteinExpansions.AbstractBernsteinForm","text":"AbstractBernsteinForm{T}\n\nAbstract supertype for all Bernstein forms types.\n\nNotes\n\nThis type is parametric in the numeric type T.\n\njulia> subtypes(AbstractBernsteinForm)\n\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#BernsteinExpansions.ImplicitBernsteinForm","page":"Types","title":"BernsteinExpansions.ImplicitBernsteinForm","text":"ImplicitBernsteinForm{T, PT<:AbstractPolynomialLike{T},\n                      D, N, TC, NC, SC} <: AbstractBernsteinForm{T}\n\nType defining an implicit Bernstein form of a polynomial over a hyperrectangular domain.\n\nFields\n\npol         – polynomial in one or several variables\ndom         – hyperrectangular set of type IntervalBox representing the                  domain of the expansion\nnumvars     – number of variables in the polynomial\ncoeffs      – vector of arrays that holds the Bernstein coefficients implicitly\nnumcoeffs   – integer holding the number of Bernstein coefficients that are                  implicitly defined\ndegs        – vector of degrees of the Bernstein polynomial for each variable\n\nExamples\n\n\n\n\n\n","category":"type"},{"location":"bibliography/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"bibliography/","page":"Bibliography","title":"Bibliography","text":"A. P. Smith. Fast construction of constant bound functions for sparse polynomials. Journal of Global Optimization 43, 445–458 (2009).\n\n\n\nA. P. Smith. Enclosure methods for systems of polynomial equations and inequalities. Ph.D. Thesis, University of Konstanz, Germany (2012).\n\n\n\nJ. Titi and J. Garloff. Fast determination of the tensorial and simplicial Bernstein forms of multivariate polynomials and rational functions. Konstanzer Schriften in Mathematik (2017).\n\n\n\n","category":"page"},{"location":"#BernsteinExpansions.jl","page":"Home","title":"BernsteinExpansions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BernsteinExpansions.jl is a Julia package to compute Bernstein coefficients of multivariate polynomials.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/introduction.md\",\n    \"man/range.md\",\n    \"man/benchmarks.md\"\n]\nDepth = 2","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/types.md\",\n    \"lib/methods.md\"\n]\nDepth = 2","category":"page"},{"location":"lib/methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"This section includes the methods implemented in BernsteinExpansions.jl.","category":"page"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"Pages = [\"methods.md\"]\nDepth = 3","category":"page"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"CurrentModule = BernsteinExpansions\nDocTestSetup = quote\n    using BernsteinExpansions\nend","category":"page"},{"location":"lib/methods/#Implicit-Form","page":"Methods","title":"Implicit Form","text":"","category":"section"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"Functions to compute the implicit Bernstein form of univariate and multivariate monomials.","category":"page"},{"location":"lib/methods/","page":"Methods","title":"Methods","text":"univariate\nmultivariate","category":"page"},{"location":"lib/methods/#BernsteinExpansions.univariate","page":"Methods","title":"BernsteinExpansions.univariate","text":"univariate(m::AbstractMonomialLike, l::Integer, dom::Interval)\n\nCompute the Bernstein coefficients of a univariate monomial over an interval.\n\nInput\n\nm    – monomial in one variable\nl    – degree of the Bernstein polynomial\ndom  – interval domain of the Bernstein expansion\n\nOutput\n\nAn l+1-dimensional vector that corresponds to the Bernstein expansion of order l of the monomial m.\n\nNotes\n\nFor experimental purposes, different variations of the algorithm are available in the internal function _univariate!. By dispatching on any of the following values, you can choose between:\n\nfastmath : Uses the @fastmath. This is the fastest implementation.\nfastpow  : Uses fastpow from DiffEqBase.jl. This is the second fastest              implementation.\nbase     : Uses ^ from Julia. This is the slowest implementation, but it's              accuracy is guaranteed to be within an <= 1 ulp for all possible              input values.\n\nAlgorithm\n\nTODO: add description (ref Smith's PhD thesis).\n\n\n\n\n\n","category":"function"},{"location":"lib/methods/#BernsteinExpansions.multivariate","page":"Methods","title":"BernsteinExpansions.multivariate","text":"multivariate(m::AbstractMonomialLike, l::AbstractVector{Int}, dom::IntervalBox{N}) where {N}\n\nCompute the Bernstein coefficients of a multivariate monomial.\n\nInput\n\nm    – monomial in several variables\nl    – vector of degrees of the Bernstein polynomial for each variable\ndom  – multi-dimensional interval domain of the Bernstein expansion\n\nOutput\n\nA vector of vectors holding the Bernstein coefficients implicitly.\n\nAlgorithm\n\nTODO: add description (ref Smith's PhD thesis). ```\n\n\n\n\n\n","category":"function"}]
}
